edge.arrow.size = 0)
plot(sim_cp_ig,
#vertex.size = log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(coreness(sim_cp_ig)),
edge.arrow.size = 0)
edge_propensities_cp <- dplyr::tribble(
~block_1, ~block_2, ~propensity,
"a",      "a",         0.1,
"a",      "b",         0.05,
"b",      "b",         0.01,
)
sim_cp <- sim_sbm_network(block_info_cp,
edge_propensities_cp,
edge_dist = purrr::rbernoulli)
sim_cp_ig <- graph_from_edgelist(as.matrix(sim_cp$edges[,1:2]))
plot(sim_cp_ig,
vertex.size = log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
plot(sim_cp_ig,
vertex.size = log1p(10*betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
log1p(betweenness(sim_cp_ig))
plot(sim_cp_ig,
vertex.size = 1 + log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
plot(sim_cp_ig,
#vertex.size = log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(coreness(sim_cp_ig)),
edge.arrow.size = 0)
cor(nodedat_cp$betw, nodedat_cp$coreness)
nodedat_cp <- data.frame(
block = sim_cp$nodes$block,
betw = betweenness(sim_cp_ig),
constraint = constraint(sim_cp_ig),
coreness = coreness(sim_cp_ig)
)
cor(nodedat_cp$betw, nodedat_cp$constraint)
cor(nodedat_cp$betw, nodedat_cp$coreness)
hist(nodedat_cp$betw)
hist(nodedat_cp$coreness)
nodedat_cp %>%
group_by(block) %>%
summarise(betw = mean(betw),
coreness = mean(coreness))
plot(sim_cp_ig,
vertex.size = 1 + log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
ggplot(nodedat_cp, aes(x = block, y = betw))+
geom_boxplot()
ggplot(nodedat_cp, aes(x = block, y = betw))+
geom_boxplot() +
scale_y_continuous(trans = 'log1p')
s <- "ghfdgheruitedfjvnsdkjaghlsdjkafghajlksdf"
substring(s, 1,12)
nchar(substring(s, 1,12))
library(tidyverse)
install.packages("tidyverse")
install.packages("haven")
install.packages("Rtools")
install.packages("effects")
install.packages("marginaleffects")
install.packages("igraph")
install.packages("sna")
install.packages("network")
install.packages("DescTools")
install.packages("ddecompose")
install.packages("psychonetrics")
#install.packages("igraph")
install.packages("IsingSampler")
install.packages("BGGM")
install.packages("IsingFit")
install.packages("parSim")
install.packages("qgraph")
install.packages("matrixStats")
install.packages("devtools")
devtools::install_github("MaartenMarsman/rbinnet")
install.packages("BGGM")
install.packages("BGGM")
install.packages("rmarkdown")
install.packages("reldist")
install.packages("reldist")
install.packages("Rtools")
install.packages("C:/Users/tsvan/Downloads/rtools45-6536-6492.exe", repos = NULL)
?install.packages
library(pacman)
pacman::p_load_gh("trinker/entity")
install.packages("rlang")
install.packages("rlang")
install.packages("brio")
pacman::p_load_gh("trinker/entity")
install.packages("digest")
pacman::p_load_gh("trinker/entity")
library(devtools)
install.packages("ellipsis")
library(devtools)
library(devtools)
install.packages("later")
library(devtools)
install.packages("later")
library(devtools)
library(devtools
)
install.packages("promises")
library(devtools)
install.packages("promises")
library(devtools)
install.packages("httpuv")
library(devtools)
install.packages("mime")
library(devtools)
install.packages("profvis")
library(devtools)
install_github("trinker/entity")
install.packages("processx")
install.packages("ps")
install_github("trinker/entity")
library(processx)
install.packages("processx")
library(devtools)
install_github("trinker/entity")
library(tidyverse)    # data management
library(ggplot2)      # plots
library(igraph)       # network analysis
library(RColorBrewer) # some functions for colors in in plots
library(classInt)     # classIntervals function - used in assigning colors
library(lubridate)    # some date functions
library(zoo)          # some more date functions
library(stringr)      # text processing
# function to extract main component from igraph object
main.component <- function(graph, ...) {
cl <- clusters(graph, ...)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
# mode function
Mode <- function(x) {
ux <- unique(na.omit(x))
ux[which.max(tabulate(match(x, ux)))]
}
# set an appropriate working directory for your system
# working directory should contain the subfolder "results"
file.stem <- paste0("C:/Users/",
Sys.info()["user"],
"/OneDrive - University of Edinburgh/")
setwd(paste0(file.stem,"research/networks_sicss/networks_sicss"))
tweets <- readRDS(gzcon(url("https://github.com/cjbarrie/CTA-ED/blob/main/data/wordembed/twts_corpus_sample.rds?raw=true")))%>%
rename(retweet_username = reftweet_username) %>%
mutate(year.month = format(date, "%Y-%m"),
year.week = str_c(
formatC(isoweek(date), format = "f", digits = 0, width = 2, flag = "0"),
"/",
str_sub(isoyear(date), 3, 4)),
year.quarter = ordered(paste(year(date), quarter(date), sep = "-")),
username = tolower(username),
retweet_username = tolower(retweet_username))
View(tweets)
min(tweets$date) # date of the first tweet
max(tweets$date) # date of the last tweet
tweets %>%
group_by(date) %>%
summarise(n.tweets = n()) %>%
ggplot(., aes(y = n.tweets, x = date ))+
geom_line()+
geom_vline(xintercept = as.Date("2019-05-24"), color = "blue")+
annotate("text", x = as.Date("2019-05-24"), y = 300, label = "PM Teresa May resigns", hjust = 1.1, color = "blue")+
geom_vline(xintercept = as.Date("2019-12-12"), color = "blue")+
annotate("text", x = as.Date("2019-12-12"), y = 300, label = "General Election", hjust = 1.1, color = "blue")
length(unique(tweets$username)) # number of tweeting accounts in dataset (note that there are 650 MPs)
length(unique(tweets$retweet_username)) # number of retweeted accounts
tweets %>%
group_by(username) %>%
summarise(party = unique(party_value)) %>%
group_by(party) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(fraction = n/sum(n))
rt.samp1 <- tweets %>%
filter(date > as.Date("2019-05-24"))%>%           # select tweets after 25 May 2019 (note that the election date is the end of the data collected)
drop_na(retweet_username) %>%                     # drop tweets that are not retweets
group_by(retweet_username, username) %>%          # our unit of analysis is the dyad (username - retweet username pair)
summarise(n_retweets = n()) %>%                   # count of the number of times i retweets j
relocate(retweet_username, username,n_retweets)   # reorder columns
View(rt.samp1)
rt.samp1.ig <- graph_from_edgelist(                       # create igraph object
as.matrix(rt.samp1[,c("retweet_username","username")]), # igraph demands a two-column matrix
directed = T                                            # our data are directed
)
rt.samp1.ig$weight <- rt.samp1$n_retweets
party.id <- tweets %>%       # create a data frame with the party id of each MP
group_by(username) %>%
summarise(party = unique(party_value)) %>%
mutate(party.color = recode(party,                      # I assign standard party colors using hex codes
"Conservative" = "#0087DC",
"Democratic Unionist Party" = "#D46A4C",
"Green Party" = "#528D6B",
"Labour" = "#E4003B",
"Labour (Co-op)" = "#E4003B",
"Liberal Democrat" = "#FDBB30",
"Plaid Cymru" = "#005B54",
"Scottish National Party" = "#FFFF00")
)
rt.samp1.attr <- data.frame(username = V(rt.samp1.ig)$name) %>% # retrieve the usernames from our network
mutate(node.sequence = row_number()) %>%                        # I create a numerical id to keep track of node order
left_join(party.id, by = "username")
plot(rt.samp1.ig)      # first, note that the igraph default plot is not very helpful
pdf("results/rt-samp1.pdf", width = 12)   # I like to save plots as pdf, which has high resolution
plot(simplify(rt.samp1.ig), # simplify removes loops
vertex.label = NA, # ignore vertex labels
vertex.size = 4,   # set node size
vertex.color = NA,
edge.arrow.size = 0) # remove arrows
dev.off()
pdf("results/rt-samp1-partylab.pdf", width = 12)
plot(simplify(rt.samp1.ig),
vertex.label = NA,
vertex.size = 4,
vertex.color = rt.samp1.attr$party.color,
edge.arrow.size = 0)
dev.off()
# Clauset, Aaron, M. E. J. Newman, and Cristopher Moore. 2004. “Finding Community Structure in Very Large Networks.” Physical Review E 70(6):066111. doi: 10.1103/PhysRevE.70.066111.
rt.samp1.greedy <- cluster_fast_greedy(as.undirected(simplify(rt.samp1.ig)))
# Blondel, Vincent D., Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefebvre. 2008. “Fast Unfolding of Communities in Large Networks.” Journal of Statistical Mechanics: Theory and Experiment 2008(10):P10008. doi: 10.1088/1742-5468/2008/10/P10008.
rt.samp1.louvain <- cluster_louvain(as.undirected(simplify(rt.samp1.ig)))
# Traag, V. A., L. Waltman, and N. J. van Eck. 2019. “From Louvain to Leiden: Guaranteeing Well-Connected Communities.” Scientific Reports 9(1):5233. doi: 10.1038/s41598-019-41695-z.
rt.samp1.leiden <- cluster_leiden(as.undirected(simplify(rt.samp1.ig)),
objective_function = "modularity",
# set initial values to party, or 99 if unobserverved
initial_membership = ifelse(!is.na(rt.samp1.attr$party),
as.numeric(as.factor(rt.samp1.attr$party)),
99),
resolution_parameter = .5)
# Raghavan, Usha Nandini, Réka Albert, and Soundar Kumara. 2007. “Near Linear Time Algorithm to Detect Community Structures in Large-Scale Networks.” Physical Review E 76(3):036106. doi: 10.1103/PhysRevE.76.036106.
rt.samp1.labelprop <- cluster_label_prop(as.undirected(simplify(rt.samp1.ig)),
# set initial values to party, or -1 if unobserverved
initial = ifelse(!is.na(rt.samp1.attr$party),
as.numeric(as.factor(rt.samp1.attr$party)),
-1),
# fix labels for nodes with observed party
fixed = !is.na(rt.samp1.attr$party))
able(rt.samp1.greedy$membership)
table(rt.samp1.greedy$membership)
table(rt.samp1.louvain$membership)
table(rt.samp1.leiden$membership)
table(rt.samp1.labelprop$membership)
modularity(rt.samp1.greedy)
modularity(rt.samp1.louvain)
modularity(rt.samp1.ig, rt.samp1.leiden$membership)
modularity(rt.samp1.labelprop)
pdf("results/rt-samp1-greedylab.pdf", width = 12)
plot(simplify(rt.samp1.ig),
#layout = l,
vertex.label = NA,
vertex.size = 4,
vertex.color = rt.samp1.greedy$membership,
edge.arrow.size = 0)
dev.off()
pdf("results/rt-samp1-louvainlab.pdf", width = 12)
plot(simplify(rt.samp1.ig),
#layout = l,
vertex.label = NA,
vertex.size = 4,
vertex.color = rt.samp1.louvain$membership,
edge.arrow.size = 0)
dev.off()
pdf("results/rt-samp1-leidenlab.pdf", width = 12)
plot(simplify(rt.samp1.ig),
#layout = l,
vertex.label = NA,
vertex.size = 4,
vertex.color = rt.samp1.leiden$membership,
edge.arrow.size = 0)
dev.off()
pdf("results/rt-samp1-labelprop.pdf", width = 12)
plot(simplify(rt.samp1.ig),
#layout = l,
vertex.label = NA,
vertex.size = 4,
vertex.color = rt.samp1.labelprop$membership,
edge.arrow.size = 0)
dev.off()
modularity(rt.samp1.greedy)
modularity(rt.samp1.louvain)
modularity(rt.samp1.ig, rt.samp1.leiden$membership)
modularity(rt.samp1.labelprop)
rt.samp1.subgroups <- data.frame(
username = V(rt.samp1.ig)$name,
subgroup.leiden = rt.samp1.leiden$membership,
subgroup.labelprop = rt.samp1.labelprop$membership) %>%
left_join(rt.samp1.attr, by = "username") %>%
group_by(subgroup.leiden) %>%
mutate(n.labour = sum(party=="Labour" | party=="Labour (Co-op)", na.rm = T),
leiden.pcnt.labour =
sum(party=="Labour" | party=="Labour (Co-op)", na.rm = T)/sum(!is.na(party)),
leiden.pcnt.cons =
sum(party=="Conservative", na.rm = T)/sum(!is.na(party)),
leiden.lean.cons = leiden.pcnt.cons- leiden.pcnt.labour) %>%
# assign a party to each community defined by label propagation
# based on the modal observed party in each group
group_by(subgroup.labelprop) %>%
mutate(labelprop.party.mode = Mode(party),
labelprop.party.color = recode(labelprop.party.mode,
"Conservative" = "#0087DC",
"Democratic Unionist Party" = "#D46A4C",
"Green Party" = "#528D6B",
"Labour" = "#E4003B",
"Labour (Co-op)" = "#E4003B",
"Liberal Democrat" = "#FDBB30",
"Plaid Cymru" = "#005B54",
"Scottish National Party" = "#FFFF00")
)
View(rt.samp1.subgroups)
nclr <- 10
min <- -1 # theoretical minimum
max <- 1 # theoretical maximum
breaks <- (max - min) / nclr
plotclr <- brewer.pal(nclr, "RdBu")
plotvar <- rt.samp1.subgroups$leiden.lean.cons
class <- classIntervals(plotvar,
nclr,
style = "fixed",
fixedBreaks = seq(min, max, breaks))
colcode <- findColours(class,
plotclr)
pdf("results/rt-samp1-leiden-leancons.pdf", width = 12)
plot(simplify(rt.samp1.ig),
vertex.label = NA,
vertex.size = 4,
vertex.color = colcode,
edge.arrow.size = 0)
dev.off()
mentions <- tweets %>%
filter(date > as.Date("2019-05-24")) %>%
filter(nchar(ments)>0)
mentions.temp <- strsplit(mentions$ments, ",", fixed = T)
mentions.long <- data.frame(
date = as.Date(unlist(mapply(rep,
as.list(mentions$date),
lapply(mentions.temp, length))),
format = "%Y-%m-%d",
origin = "1970-01-01"),
username = unlist(mapply(rep,
as.list(mentions$username),
lapply(mentions.temp, length))),
mentioned.account = trimws(unlist(mentions.temp)),
stringsAsFactors = F
) %>%
mutate(mentioned.account = gsub("@","",
mentioned.account,
fixed = T),
#year.month = format(date, "%Y-%m")
) %>%
filter(nchar(mentioned.account)>0) %>%
group_by(username,mentioned.account) %>%
summarize(n_mentions = n())
mentions.ig <- graph_from_edgelist(
as.matrix(
mentions.long[,c("username","mentioned.account")]
)
)
plot(simplify(mentions.ig),
vertex.label = NA,
vertex.size = 2,
edge.arrow.size = 0)
mentions.samp.attr <- data.frame(
username = V(mentions.ig)$name,
node.seq = 1:length(V(mentions.ig)$name),
degree.in = degree(mentions.ig, mode = "in")
) %>%
left_join(party.id,
by = "username")
pdf("results/mentions-samp-partylab.pdf", width = 12)
plot(simplify(mentions.ig),
vertex.label = NA,
vertex.size = 4,
vertex.color = mentions.samp.attr$party.color,
edge.arrow.size = 0)
dev.off()
# select retweets, summarise over dyad-month
retweets.monthly <- tweets %>%
drop_na(retweet_username) %>%
group_by(retweet_username, username, year.month) %>%          # our unit of analysis is the dyad-month (username - retweet username pair in each month)
summarise(n_retweets = n()) %>%                             # count of the number of times i retweets j
relocate(retweet_username, username,n_retweets)
# split the data by month, creating list, and format as matrix
el.rt.monthly <- lapply(split(retweets.monthly, retweets.monthly$year.month),
function(x){
as.matrix(x[,c("retweet_username","username")])
})
# create list of of igraph objects
ig.rt.monthly <- lapply(el.rt.monthly,
graph_from_edgelist,
directed = T)
nodes.monthly <- list()
for(i in 1:length(ig.rt.monthly)){
nodes.monthly[[i]] <-  data.frame(username = V(ig.rt.monthly[[i]])$name)
nodes.monthly[[i]]$node.seq <- 1:nrow(nodes.monthly[[i]])
nodes.monthly[[i]] <- merge(nodes.monthly[[i]],
party.id,
by = "username",
all.x = T)
nodes.monthly[[i]]$party.color <- ifelse(is.na(nodes.monthly[[i]]$party.color),
NA,
nodes.monthly[[i]]$party.color)
nodes.monthly[[i]] <- nodes.monthly[[i]][order(nodes.monthly[[i]]$node.seq),]
# note that we can also assign vertex attributes to the igraph object
V(ig.rt.monthly[[i]])$vertex.color <- nodes.monthly[[i]]$party.color
}
labelprop.fun <- function(graph, ...){
cluster_label_prop(simplify(as.undirected(graph)))
}
### label propagation monthly
initial.list <- lapply(nodes.monthly, function(x){
ifelse(!is.na(x$party),
as.numeric(as.factor(x$party)),
-1)
})
monthly.labelprop <- mapply(labelprop.fun,
graph = ig.rt.monthly,
initial = initial.list,
fixed = lapply(initial.list,
function(x) !is.na(x)))
leiden.fun <- function(graph,...){
cluster_leiden(as.undirected(simplify(graph)),
objective_function = "modularity")
}
initial.list <- lapply(nodes.monthly, function(x){
ifelse(!is.na(x$party),
as.numeric(as.factor(x$party)),
99)
})
monthly.leiden <- mapply(leiden.fun,
graph = ig.rt.monthly,
initial_membership = initial.list)
modul.monthly.leiden <- mapply(modularity,
x = ig.rt.monthly,
membership = lapply(monthly.leiden,
membership))
getwd()
rt.samp1.leiden <- cluster_leiden(as.undirected(simplify(mention.ig)),
objective_function = "modularity",
# set initial values to party, or 99 if unobserverved
#initial_membership = ifelse(!is.na(rt.samp1.attr$party),
#                            as.numeric(as.factor(rt.samp1.attr$party)),
#                            99),
resolution_parameter = .5)
rt.samp1.leiden <- cluster_leiden(as.undirected(simplify(mentions.ig)),
objective_function = "modularity",
# set initial values to party, or 99 if unobserverved
#initial_membership = ifelse(!is.na(rt.samp1.attr$party),
#                            as.numeric(as.factor(rt.samp1.attr$party)),
#                            99),
resolution_parameter = .5)
modulariry(rt.samp1.leiden)
mentions.leiden <- cluster_leiden(as.undirected(simplify(mentions.ig)),
objective_function = "modularity",
# set initial values to party, or 99 if unobserverved
#initial_membership = ifelse(!is.na(rt.samp1.attr$party),
#                            as.numeric(as.factor(rt.samp1.attr$party)),
#                            99),
resolution_parameter = .5)
modularity(mentions.ig, mentions.leiden$membership)
# select retweets, summarise over dyad-month
retweets.monthly <- tweets %>%
drop_na(retweet_username) %>%
group_by(retweet_username, username, year.month) %>%          # our unit of analysis is the dyad-month (username - retweet username pair in each month)
summarise(n_retweets = n()) %>%                             # count of the number of times i retweets j
relocate(retweet_username, username,n_retweets)
# split the data by month, creating list, and format as matrix
el.rt.monthly <- lapply(split(retweets.monthly, retweets.monthly$year.month),
function(x){
as.matrix(x[,c("retweet_username","username")])
})
ig.rt.monthly <- lapply(el.rt.monthly,
graph_from_edgelist,
directed = T)
nodes.monthly <- list()
for(i in 1:length(ig.rt.monthly)){
nodes.monthly[[i]] <-  data.frame(username = V(ig.rt.monthly[[i]])$name)
nodes.monthly[[i]]$node.seq <- 1:nrow(nodes.monthly[[i]])
nodes.monthly[[i]] <- merge(nodes.monthly[[i]],
party.id,
by = "username",
all.x = T)
nodes.monthly[[i]]$party.color <- ifelse(is.na(nodes.monthly[[i]]$party.color),
NA,
nodes.monthly[[i]]$party.color)
nodes.monthly[[i]] <- nodes.monthly[[i]][order(nodes.monthly[[i]]$node.seq),]
# note that we can also assign vertex attributes to the igraph object
V(ig.rt.monthly[[i]])$vertex.color <- nodes.monthly[[i]]$party.color
}
data.frame(
date = as.Date(as.yearmon(names(lapply(monthly.labelprop, modularity)))),
modul.labelprop = unlist(lapply(monthly.labelprop, modularity)),
modul.leiden = unlist(modul.monthly.leiden)
) %>%
pivot_longer(-date)%>%
ggplot(., aes(y = value, x = date, color = name))+
geom_line()+
xlab("")+
ylab("modularity")+
scale_color_discrete(name = "Method", labels = c("Label propagation",
"Leiden"))+
theme_bw(base_size = 16)
