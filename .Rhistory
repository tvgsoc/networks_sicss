for(i in 1:100){
sim_clust_list[[i]] <- sim_sbm_network(block_info_clust,
edge_propensities_clust,
edge_dist = purrr::rbernoulli)
sim_clust_ig_list[[i]] <- graph_from_edgelist(as.matrix(sim_clust_list[[i]]$edges[,1:2]))
}
sim_clust_ig_betw <- lapply(sim_clust_ig_list, betweenness)
sim_clust_ig_betwskew <- lapply(sim_clust_ig_betw, skewness)
sim_clust_ig_betwkurt <- lapply(sim_clust_ig_betw, kurtosis)
hist(unlist(sim_clust_ig_betwskew))
hist(unlist(sim_clust_ig_betwkurt))
data.frame(cp = unlist(sim_clust_ig_betwskew),
clust = unlist(sim_cp_ig_betwskew)) %>%
pivot_longer()
?pivot_longer
data.frame(cp = unlist(sim_clust_ig_betwskew),
clust = unlist(sim_cp_ig_betwskew)) %>%
pivot_longer(cp,clust)
data.frame(cp = unlist(sim_clust_ig_betwskew),
clust = unlist(sim_cp_ig_betwskew)) %>%
pivot_longer(cols = (cp,clust))
data.frame(cp = unlist(sim_clust_ig_betwskew),
clust = unlist(sim_cp_ig_betwskew)) %>%
pivot_longer(cols = c(cp,clust))
data.frame(cp = unlist(sim_clust_ig_betwskew),
clust = unlist(sim_cp_ig_betwskew)) %>%
pivot_longer(cols = c(cp,clust)) %>%
ggplot(., aes(y = value, color = name))+
geom_density()
data.frame(cp = unlist(sim_clust_ig_betwskew),
clust = unlist(sim_cp_ig_betwskew)) %>%
pivot_longer(cols = c(cp,clust)) %>%
ggplot(., aes(x = value, color = name))+
geom_density()
data.frame(cp = unlist(sim_clust_ig_betwkurt),
clust = unlist(sim_cp_ig_betwkurt)) %>%
pivot_longer(cols = c(cp,clust)) %>%
ggplot(., aes(x = value, color = name))+
geom_density()
sim_cp_ig_constraint <- lapply(sim_cp_ig_list, constraint)
sim_cp_ig_constraint[[1]]
hist(sim_cp_ig_constraint[[1]])
hist(sim_cp_ig_constraint[[10]])
sim_clust_ig_constraint <- lapply(sim_clust_ig_list, constraint)
sim_clust_ig_constskew <- lapply(sim_clust_ig_constraint, skewness)
sim_clust_ig_constkurt <- lapply(sim_clust_ig_contraint, kurtosis)
sim_clust_ig_constraint <- lapply(sim_clust_ig_list, constraint)
sim_clust_ig_constskew <- lapply(sim_clust_ig_constraint, skewness)
sim_clust_ig_constkurt <- lapply(sim_clust_ig_constraint, kurtosis)
data.frame(cp = unlist(sim_clust_ig_constskew),
clust = unlist(sim_cp_ig_constskew)) %>%
pivot_longer(cols = c(cp,clust)) %>%
ggplot(., aes(x = value, color = name))+
geom_density()
sim_clust_ig_constraint <- lapply(sim_clust_ig_list, constraint)
sim_clust_ig_constskew <- lapply(sim_clust_ig_constraint, skewness)
sim_clust_ig_constkurt <- lapply(sim_clust_ig_constraint, kurtosis)
sim_cp_ig_constraint <- lapply(sim_cp_ig_list, constraint)
sim_cp_ig_constskew <- lapply(sim_cp_ig_constraint, skewness)
sim_cp_ig_constkurt <- lapply(sim_cp_ig_constraint, kurtosis)
data.frame(cp = unlist(sim_clust_ig_constskew),
clust = unlist(sim_cp_ig_constskew)) %>%
pivot_longer(cols = c(cp,clust)) %>%
ggplot(., aes(x = value, color = name))+
geom_density()
data.frame(cp = unlist(sim_clust_ig_constkurt),
clust = unlist(sim_cp_ig_constkurt)) %>%
pivot_longer(cols = c(cp,clust)) %>%
ggplot(., aes(x = value, color = name))+
geom_density()
nodedat_cp <- data.frame(
block = sim_cp$nodes$block,
betw = betweenness(sim_cp_ig),
constraint = constraint(sim_cp_ig)
)
cor(nodedat_cp$betw, nodedat_cp$constraint)
nodedat_clust <- data.frame(
block = sim_clust$nodes$block,
betw = betweenness(sim_clust_ig),
constraint = constraint(sim_clust_ig)
)
cor(nodedat_clust$betw, nodedat_clust$constraint)
plot(sim_clust_ig,
vertex.size = log1p(constraint(sim_clust_ig)),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
constraint(sim_clust_ig)
plot(sim_clust_ig,
vertex.size = log1p(constraint(-10*sim_clust_ig)),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
plot(sim_clust_ig,
vertex.size = log1p(-10*constraint(sim_clust_ig)),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
1/constraint(sim_clust_ig)
plot(sim_clust_ig,
vertex.size = 1/constraint(sim_clust_ig)),
plot(sim_clust_ig,
vertex.size = 1/constraint(sim_clust_ig),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
plot(constraint(sim_clust_ig),1/constraint(sim_clust_ig))
plot(sim_clust_ig,
vertex.size = 1/constraint(sim_clust_ig),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
block_info_clust <- dplyr::tribble(
~block, ~n_nodes,
"a",       100,
"b",       100
)
edge_propensities_clust <- dplyr::tribble(
~block_1, ~block_2, ~propensity,
"a",      "a",         0.1,
"a",      "b",         0.01,
"b",      "b",         0.1,
)
sim_clust <- sim_sbm_network(block_info_clust,
edge_propensities_clust,
edge_dist = purrr::rbernoulli)
sim_clust_ig <- graph_from_edgelist(as.matrix(sim_clust$edges[,1:2]))
plot(sim_clust_ig,
vertex.size = log1p(betweenness(sim_clust_ig)),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
plot(sim_clust_ig,
vertex.size = 1/constraint(sim_clust_ig),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
nodedat_clust <- data.frame(
block = sim_clust$nodes$block,
betw = betweenness(sim_clust_ig),
constraint = constraint(sim_clust_ig)
)
cor(nodedat_clust$betw, nodedat_clust$constraint)
hist(1/constraint(sim_clust_ig))
hist(log(1/constraint(sim_clust_ig)))
block_info_clust <- dplyr::tribble(
~block, ~n_nodes,
"a",       50,
"b",       50
)
edge_propensities_clust <- dplyr::tribble(
~block_1, ~block_2, ~propensity,
"a",      "a",         0.1,
"a",      "b",         0.01,
"b",      "b",         0.1,
)
sim_clust <- sim_sbm_network(block_info_clust,
edge_propensities_clust,
edge_dist = purrr::rbernoulli)
sim_clust_ig <- graph_from_edgelist(as.matrix(sim_clust$edges[,1:2]))
plot(sim_clust_ig,
vertex.size = log1p(betweenness(sim_clust_ig)),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
?sim_sbm_network
degree(sim_clust_ig)
hist(degree(sim_clust_ig))
nodedat_clust <- data.frame(
block = sim_clust$nodes$block,
betw = betweenness(sim_clust_ig),
constraint = constraint(sim_clust_ig),
coreness = coreness(sim_clust_ig)
)
hist(nodedat_clust$coreness)
nodedat_clust %>%
group_by(block) %>%
summarise(betw = mean(betw)m
nodedat_clust %>%
group_by(block) %>%
summarise(betw = mean(betw),
coreness = mean(coreness))
plot(sim_clust_ig,
vertex.size = coreness(sim_clust_ig),
vertex.label = NA,
vertex.color = factor(sim_clust$nodes$block),
edge.arrow.size = 0)
nodedat_cp <- data.frame(
block = sim_cp$nodes$block,
betw = betweenness(sim_cp_ig),
constraint = constraint(sim_cp_ig),
coreness = coreness(sim_cp_ig)
)
cor(nodedat_cp$betw, nodedat_cp$coreness)
nodedat_cp %>%
group_by(block) %>%
summarise(betw = mean(betw),
coreness = mean(coreness))
hist(nodedat_cp$coreness)
table(nodedat_cp$coreness)
table(nodedat_cp$coreness, nodedat_cp$block)
plot(sim_cp_ig,
vertex.size = log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
?coreness
library(graphUtils)
install.packages("graphUtils")
install.packages("igraphUtils")
library(remotes)
remotes::install_github("schochastics/igraphUtils")
plot(sim_cp_ig,
#vertex.size = log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(coreness(sim_cp)),
edge.arrow.size = 0)
plot(sim_cp_ig,
#vertex.size = log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(coreness(sim_cp_ig)),
edge.arrow.size = 0)
edge_propensities_cp <- dplyr::tribble(
~block_1, ~block_2, ~propensity,
"a",      "a",         0.1,
"a",      "b",         0.05,
"b",      "b",         0.01,
)
sim_cp <- sim_sbm_network(block_info_cp,
edge_propensities_cp,
edge_dist = purrr::rbernoulli)
sim_cp_ig <- graph_from_edgelist(as.matrix(sim_cp$edges[,1:2]))
plot(sim_cp_ig,
vertex.size = log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
plot(sim_cp_ig,
vertex.size = log1p(10*betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
log1p(betweenness(sim_cp_ig))
plot(sim_cp_ig,
vertex.size = 1 + log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
plot(sim_cp_ig,
#vertex.size = log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(coreness(sim_cp_ig)),
edge.arrow.size = 0)
cor(nodedat_cp$betw, nodedat_cp$coreness)
nodedat_cp <- data.frame(
block = sim_cp$nodes$block,
betw = betweenness(sim_cp_ig),
constraint = constraint(sim_cp_ig),
coreness = coreness(sim_cp_ig)
)
cor(nodedat_cp$betw, nodedat_cp$constraint)
cor(nodedat_cp$betw, nodedat_cp$coreness)
hist(nodedat_cp$betw)
hist(nodedat_cp$coreness)
nodedat_cp %>%
group_by(block) %>%
summarise(betw = mean(betw),
coreness = mean(coreness))
plot(sim_cp_ig,
vertex.size = 1 + log1p(betweenness(sim_cp_ig)),
vertex.label = NA,
vertex.color = factor(sim_cp$nodes$block),
edge.arrow.size = 0)
ggplot(nodedat_cp, aes(x = block, y = betw))+
geom_boxplot()
ggplot(nodedat_cp, aes(x = block, y = betw))+
geom_boxplot() +
scale_y_continuous(trans = 'log1p')
s <- "ghfdgheruitedfjvnsdkjaghlsdjkafghajlksdf"
substring(s, 1,12)
nchar(substring(s, 1,12))
library(tidyverse)
install.packages("tidyverse")
install.packages("haven")
install.packages("Rtools")
install.packages("effects")
install.packages("marginaleffects")
install.packages("igraph")
install.packages("sna")
install.packages("network")
install.packages("DescTools")
install.packages("ddecompose")
install.packages("psychonetrics")
#install.packages("igraph")
install.packages("IsingSampler")
install.packages("BGGM")
install.packages("IsingFit")
install.packages("parSim")
install.packages("qgraph")
install.packages("matrixStats")
install.packages("devtools")
devtools::install_github("MaartenMarsman/rbinnet")
install.packages("BGGM")
install.packages("BGGM")
install.packages("rmarkdown")
install.packages("reldist")
install.packages("reldist")
install.packages("Rtools")
install.packages("C:/Users/tsvan/Downloads/rtools45-6536-6492.exe", repos = NULL)
?install.packages
library(pacman)
pacman::p_load_gh("trinker/entity")
install.packages("rlang")
install.packages("rlang")
install.packages("brio")
pacman::p_load_gh("trinker/entity")
install.packages("digest")
pacman::p_load_gh("trinker/entity")
library(devtools)
install.packages("ellipsis")
library(devtools)
library(devtools)
install.packages("later")
library(devtools)
install.packages("later")
library(devtools)
library(devtools
)
install.packages("promises")
library(devtools)
install.packages("promises")
library(devtools)
install.packages("httpuv")
library(devtools)
install.packages("mime")
library(devtools)
install.packages("profvis")
library(devtools)
install_github("trinker/entity")
install.packages("processx")
install.packages("ps")
install_github("trinker/entity")
library(processx)
install.packages("processx")
library(devtools)
install_github("trinker/entity")
install.packages("processx")
library(processx)
library(devtools)
install_github("trinker/entity")
library(tidyverse)
library(entity)
file.stem <- paste0("C:/Users/",
Sys.info()["user"],
"/OneDrive - University of Edinburgh/")
#file.stem <- paste0("C:/Users/",
#                    Sys.info()["user"])
setwd(paste0(file.stem, "research/iati"))
orgs <- read.csv("data/cleaned_orgref_narrative.csv")
organization_entity(orgs$narrative_clean[1:100])
orgs$narrative_clean_extracted <- organization_entity(orgs$narrative_clean)
View(orgs)
unique(orgs$narrative_clean_extracted)
library(tidyverse)
library(rjson)
library(igraph)
# data from:
file.stem <- paste0("C:/Users/",
Sys.info()["user"],
"/OneDrive - University of Edinburgh/")
setwd(paste0(file.stem,"research/reddit"))
utt <- fromJSON(file = "data/reddit-corpus-small/reddit-corpus-small/utterances.json")
meta <- lapply(utt, '[[', "meta")
subreddit <- unlist(lapply(meta, '[[', "subreddit"))
askreddit <- utt[which(subreddit=="AskReddit")]
null_to_na <- function(x){
null.elements <- unlist(lapply(x, is.null))
x[null.elements] <- NA
unlist(x)
}
askreddit2 <- data.frame(id = unlist(lapply(askreddit, '[[', "id")),
user = unlist(lapply(askreddit, '[[', "user")),
reply_to = null_to_na(lapply(askreddit, '[[', "reply_to")),
timestamp = unlist(lapply(askreddit, '[[', "timestamp")))
replies <- askreddit2 %>%
filter(!is.na(reply_to)) %>%
filter(user != "[deleted]") %>%
select(-c(timestamp, reply_to))
el <- askreddit3 %>%
left_join(replies,
by = c("reply_to" = "id")) %>%
rename(user_response = user.x, user_op = user.y) %>%
drop_na(reply_to) %>%
drop_na(user_op)
el <- askreddit2 %>%
left_join(replies,
by = c("reply_to" = "id")) %>%
rename(user_response = user.x, user_op = user.y) %>%
drop_na(reply_to) %>%
drop_na(user_op)
#%>% mutate(date = as.Date(timestamp, origin='1970-01-01'))
ig <- graph_from_edgelist(as.matrix(el[,c("user_response", "user_op")]))
plot(ig,
vertex.size =2,
vertex.label = NA,
edge.arrow.size = 0)
plot(ig,
vertex.size =sqrt(degree(ig)+1),
vertex.label = NA,
edge.arrow.size = 0)
sort(degree(ig, mode = "in"), decreasing = T)[1:10]
sort(degree(out, mode = "in"), decreasing = T)[1:10]
sort(degree(ig, mode = "out"), decreasing = T)[1:10]
replies <- askreddit2 %>%
filter(!is.na(reply_to)) %>%
filter(user != "[deleted]") %>%
filter(reply_to!="[deleted]") %>%
select(-c(timestamp, reply_to))
askreddit <- utt[which(subreddit=="AskReddit")]
askreddit2 <- data.frame(id = unlist(lapply(askreddit, '[[', "id")),
user = unlist(lapply(askreddit, '[[', "user")),
reply_to = null_to_na(lapply(askreddit, '[[', "reply_to")),
timestamp = unlist(lapply(askreddit, '[[', "timestamp")))
replies <- askreddit2 %>%
filter(!is.na(reply_to)) %>%
filter(user != "[deleted]") %>%
filter(reply_to!="[deleted]") %>%
select(-c(timestamp, reply_to))
el <- askreddit2 %>%
left_join(replies,
by = c("reply_to" = "id")) %>%
rename(user_response = user.x, user_op = user.y) %>%
drop_na(reply_to) %>%
drop_na(user_op)
ig <- graph_from_edgelist(as.matrix(el[,c("user_response", "user_op")]))
plot(ig,
vertex.size =2,
vertex.label = NA,
edge.arrow.size = 0)
library(tidyverse)
library(rjson)
library(igraph)
null_to_na <- function(x){
null.elements <- unlist(lapply(x, is.null))
x[null.elements] <- NA
unlist(x)
}
# data from:
file.stem <- paste0("C:/Users/",
Sys.info()["user"],
"/OneDrive - University of Edinburgh/")
setwd(paste0(file.stem,"research/networks_sicss"))
utt <- fromJSON(file = "data/utterances.json")
meta <- lapply(utt, '[[', "meta")
subreddit <- unlist(lapply(meta, '[[', "subreddit"))
askreddit <- utt[which(subreddit=="AskReddit")]
askreddit2 <- data.frame(id = unlist(lapply(askreddit, '[[', "id")),
user = unlist(lapply(askreddit, '[[', "user")),
reply_to = null_to_na(lapply(askreddit, '[[', "reply_to")),
timestamp = unlist(lapply(askreddit, '[[', "timestamp")))
replies <- askreddit2 %>%
filter(!is.na(reply_to)) %>%
filter(user != "[deleted]") %>%
filter(reply_to!="[deleted]") %>%
select(-c(timestamp, reply_to))
el <- askreddit2 %>%
left_join(replies,
by = c("reply_to" = "id")) %>%
rename(user_response = user.x, user_op = user.y) %>%
drop_na(reply_to) %>%
drop_na(user_op)
write.csv(el, "data/askreddit_replies_edgelist.csv", row.names = F)
library(tidyverse)
library(igraph)
file.stem <- paste0("C:/Users/",
Sys.info()["user"],
"/OneDrive - University of Edinburgh/")
setwd(paste0(file.stem,"research/networks_sicss"))
# data are from students taking a social networks class in 2022
# a tie indicates that focal student (ego) nominated another student (alter)
# on a social network survey
# contact frequency is the frequency of interaction
# contact type
contact.freq <- read.csv("data/contact_frequency.csv")
setwd(paste0(file.stem,"research/networks_sicss/networks_sicss"))
contact.freq <- read.csv("data/contact_frequency.csv")
contact.type <- read.csv("data/contact_type.csv")
attributes <- read.csv("data/respondent_attributes.csv")
library(tidyverse)    # data management
library(ggplot2)      # plots
library(igraph)       # network analysis
#library(ForceAtlas2) # force atlas is a nice network layout, but we won't use it here
library(RColorBrewer) # some functions for colors in in plots
library(classInt)     # classIntervals function - used in assigning colors
library(lubridate)    # some date functions
library(zoo)          # some more date functions
library(stringr)      # text processing
file.stem <- paste0("C:/Users/",
Sys.info()["user"],
"/OneDrive - University of Edinburgh/")
setwd(paste0(file.stem,"research/sicss_networks/sicss_networks"))
setwd(paste0(file.stem,"research/networks_sicss/networks_sicss"))
tweets <- readRDS(gzcon(url("https://github.com/cjbarrie/CTA-ED/blob/main/data/wordembed/twts_corpus_sample.rds?raw=true")))%>%
rename(retweet_username = reftweet_username) %>%
mutate(year.month = format(date, "%Y-%m"),
year.week = str_c(
formatC(isoweek(date), format = "f", digits = 0, width = 2, flag = "0"),
"/",
str_sub(isoyear(date), 3, 4)),
year.quarter = ordered(paste(year(date), quarter(date), sep = "-")),
username = tolower(username),
retweet_username = tolower(retweet_username))
